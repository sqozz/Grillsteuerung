   1               		.file	"at90can_set_dyn_filter.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	can_set_filter
  12               	can_set_filter:
  13               	.LFB18:
  14               		.file 1 "at90can_set_dyn_filter.c"
   1:at90can_set_dyn_filter.c **** // ----------------------------------------------------------------------------
   2:at90can_set_dyn_filter.c **** /*
   3:at90can_set_dyn_filter.c ****  * Copyright (c) 2007 Fabian Greif, Roboterclub Aachen e.V.
   4:at90can_set_dyn_filter.c ****  *  All rights reserved.
   5:at90can_set_dyn_filter.c ****  *
   6:at90can_set_dyn_filter.c ****  * Redistribution and use in source and binary forms, with or without
   7:at90can_set_dyn_filter.c ****  * modification, are permitted provided that the following conditions
   8:at90can_set_dyn_filter.c ****  * are met:
   9:at90can_set_dyn_filter.c ****  * 1. Redistributions of source code must retain the above copyright
  10:at90can_set_dyn_filter.c ****  *    notice, this list of conditions and the following disclaimer.
  11:at90can_set_dyn_filter.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:at90can_set_dyn_filter.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:at90can_set_dyn_filter.c ****  *    documentation and/or other materials provided with the distribution.
  14:at90can_set_dyn_filter.c ****  *
  15:at90can_set_dyn_filter.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  16:at90can_set_dyn_filter.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  17:at90can_set_dyn_filter.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  18:at90can_set_dyn_filter.c ****  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  19:at90can_set_dyn_filter.c ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  20:at90can_set_dyn_filter.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  21:at90can_set_dyn_filter.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  22:at90can_set_dyn_filter.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:at90can_set_dyn_filter.c ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:at90can_set_dyn_filter.c ****  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  25:at90can_set_dyn_filter.c ****  * SUCH DAMAGE.
  26:at90can_set_dyn_filter.c ****  *
  27:at90can_set_dyn_filter.c ****  * $Id: at90can_set_dyn_filter.c 6837 2008-11-16 19:05:15Z fabian $
  28:at90can_set_dyn_filter.c ****  */
  29:at90can_set_dyn_filter.c **** // ----------------------------------------------------------------------------
  30:at90can_set_dyn_filter.c **** 
  31:at90can_set_dyn_filter.c **** #include "at90can_private.h"
  32:at90can_set_dyn_filter.c **** #ifdef	SUPPORT_FOR_AT90CAN__
  33:at90can_set_dyn_filter.c **** 
  34:at90can_set_dyn_filter.c **** // ----------------------------------------------------------------------------
  35:at90can_set_dyn_filter.c **** bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
  36:at90can_set_dyn_filter.c **** {
  15               		.loc 1 36 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 FB01      		movw r30,r22
  37:at90can_set_dyn_filter.c **** 	if (number > (MESSAGE_OBJECTS - 1)) {
  23               		.loc 1 37 0
  24 0002 8630      		cpi r24,lo8(6)
  25 0004 00F0      		brlo .+2
  26 0006 00C0      		rjmp .L17
  27               	.LBB7:
  28               	.LBB8:
  29               		.file 2 "at90can_private.h"
   1:at90can_private.h **** // ----------------------------------------------------------------------------
   2:at90can_private.h **** /*
   3:at90can_private.h ****  * Copyright (c) 2007 Fabian Greif, Roboterclub Aachen e.V.
   4:at90can_private.h ****  *  All rights reserved.
   5:at90can_private.h ****  *
   6:at90can_private.h ****  * Redistribution and use in source and binary forms, with or without
   7:at90can_private.h ****  * modification, are permitted provided that the following conditions
   8:at90can_private.h ****  * are met:
   9:at90can_private.h ****  * 1. Redistributions of source code must retain the above copyright
  10:at90can_private.h ****  *    notice, this list of conditions and the following disclaimer.
  11:at90can_private.h ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:at90can_private.h ****  *    notice, this list of conditions and the following disclaimer in the
  13:at90can_private.h ****  *    documentation and/or other materials provided with the distribution.
  14:at90can_private.h ****  *
  15:at90can_private.h ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  16:at90can_private.h ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  17:at90can_private.h ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  18:at90can_private.h ****  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  19:at90can_private.h ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  20:at90can_private.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  21:at90can_private.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  22:at90can_private.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:at90can_private.h ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:at90can_private.h ****  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  25:at90can_private.h ****  * SUCH DAMAGE.
  26:at90can_private.h ****  *
  27:at90can_private.h ****  * $Id: at90can_private.h 6910 2008-11-30 21:13:14Z fabian $
  28:at90can_private.h ****  */
  29:at90can_private.h **** // ----------------------------------------------------------------------------
  30:at90can_private.h **** 
  31:at90can_private.h **** #ifndef	AT90CAN_PRIVATE_H
  32:at90can_private.h **** #define	AT90CAN_PRIVATE_H
  33:at90can_private.h **** 
  34:at90can_private.h **** // ----------------------------------------------------------------------------
  35:at90can_private.h **** 
  36:at90can_private.h **** #include <avr/io.h>
  37:at90can_private.h **** #include <avr/interrupt.h>
  38:at90can_private.h **** 
  39:at90can_private.h **** #include <stdlib.h>
  40:at90can_private.h **** 
  41:at90can_private.h **** #include "can_private.h"
  42:at90can_private.h **** #include "can.h"
  43:at90can_private.h **** #include "can_buffer.h"
  44:at90can_private.h **** #include "utils.h"
  45:at90can_private.h **** 
  46:at90can_private.h **** // ----------------------------------------------------------------------------
  47:at90can_private.h **** #if (defined (__AVR_AT90CAN32__) || \
  48:at90can_private.h **** 	 defined (__AVR_AT90CAN64__) || \
  49:at90can_private.h **** 	 defined (__AVR_AT90CAN128__) || \
  50:at90can_private.h **** 	 defined (__AVR_ATmega16M1__) || \
  51:at90can_private.h **** 	 defined (__AVR_ATmega32M1__) || \
  52:at90can_private.h **** 	 defined (__AVR_ATmega64M1__) ) && \
  53:at90can_private.h **** 	 BUILD_FOR_AT90CAN == 1
  54:at90can_private.h **** 
  55:at90can_private.h **** #if (F_CPU == 16000000UL)
  56:at90can_private.h **** 	#define AT90CAN_TIMER_PRESCALE 199
  57:at90can_private.h **** # else
  58:at90can_private.h **** 	#if (F_CPU == 8000000UL)
  59:at90can_private.h **** 		#define AT90CAN_TIMER_PRESCALE 99
  60:at90can_private.h **** 	#else
  61:at90can_private.h **** 		#if (F_CPU == 4000000UL)
  62:at90can_private.h **** 			#define AT90CAN_TIMER_PRESCALE 49
  63:at90can_private.h **** 		#else
  64:at90can_private.h **** 			#error	only 4, 8 or 16 MHz for F_CPU supported!
  65:at90can_private.h **** 		#endif
  66:at90can_private.h **** 	#endif
  67:at90can_private.h **** #endif
  68:at90can_private.h **** 
  69:at90can_private.h **** 
  70:at90can_private.h **** #define	SUPPORT_FOR_AT90CAN__		1
  71:at90can_private.h **** 
  72:at90can_private.h **** #if defined (__AVR_AT90CAN32__) || \
  73:at90can_private.h **** 	defined (__AVR_AT90CAN64__) || \
  74:at90can_private.h **** 	defined (__AVR_AT90CAN128__)
  75:at90can_private.h **** 	#define AT90CAN
  76:at90can_private.h **** 	#define MESSAGE_OBJECTS 15
  77:at90can_private.h **** #endif
  78:at90can_private.h **** 
  79:at90can_private.h **** #if	defined (__AVR_ATmega16M1__) || \
  80:at90can_private.h **** 	defined (__AVR_ATmega32M1__) || \
  81:at90can_private.h **** 	defined (__AVR_ATmega64M1__)
  82:at90can_private.h **** 	#define ATmegaM
  83:at90can_private.h **** 	#define	MESSAGE_OBJECTS 6
  84:at90can_private.h **** #endif
  85:at90can_private.h **** 
  86:at90can_private.h **** // ----------------------------------------------------------------------------
  87:at90can_private.h **** 
  88:at90can_private.h **** #if CAN_RX_BUFFER_SIZE > 0
  89:at90can_private.h **** extern can_buffer_t can_rx_buffer;
  90:at90can_private.h **** #else
  91:at90can_private.h **** extern volatile uint8_t _messages_waiting;
  92:at90can_private.h **** #endif
  93:at90can_private.h **** 
  94:at90can_private.h **** #if CAN_TX_BUFFER_SIZE > 0
  95:at90can_private.h **** extern can_buffer_t can_tx_buffer;
  96:at90can_private.h **** #else
  97:at90can_private.h **** extern volatile uint8_t _free_buffer;
  98:at90can_private.h **** #endif
  99:at90can_private.h **** 
 100:at90can_private.h **** #if CAN_FORCE_TX_ORDER
 101:at90can_private.h **** extern volatile uint8_t _transmission_in_progress ;
 102:at90can_private.h **** #endif
 103:at90can_private.h **** 
 104:at90can_private.h **** // ----------------------------------------------------------------------------
 105:at90can_private.h **** extern uint8_t _find_free_mob(void);
 106:at90can_private.h **** 
 107:at90can_private.h **** // ----------------------------------------------------------------------------
 108:at90can_private.h **** extern void _disable_mob_interrupt(uint8_t mob);
 109:at90can_private.h **** 
 110:at90can_private.h **** // ----------------------------------------------------------------------------
 111:at90can_private.h **** extern void _enable_mob_interrupt(uint8_t mob);
 112:at90can_private.h **** 
 113:at90can_private.h **** 
 114:at90can_private.h **** // ----------------------------------------------------------------------------
 115:at90can_private.h **** extern uint8_t at90can_send_message(const can_t *msg);
 116:at90can_private.h **** 
 117:at90can_private.h **** // ----------------------------------------------------------------------------
 118:at90can_private.h **** extern uint8_t at90can_get_message(can_t *msg);
 119:at90can_private.h **** 
 120:at90can_private.h **** // ----------------------------------------------------------------------------
 121:at90can_private.h **** /**
 122:at90can_private.h ****  * \brief	Copy data form a message in RAM to the actual registers
 123:at90can_private.h ****  * \warning this function assumes CANPAGE to be set properly
 124:at90can_private.h ****  */
 125:at90can_private.h **** extern void at90can_copy_message_to_mob(const can_t *msg);
 126:at90can_private.h **** 
 127:at90can_private.h **** // ----------------------------------------------------------------------------
 128:at90can_private.h **** /**
 129:at90can_private.h ****  * \brief	Copy data form a message the registers to RAM
 130:at90can_private.h ****  * \warning this function assumes CANPAGE to be set properly
 131:at90can_private.h ****  */
 132:at90can_private.h **** extern void at90can_copy_mob_to_message(can_t *msg);
 133:at90can_private.h **** 
 134:at90can_private.h **** // ----------------------------------------------------------------------------
 135:at90can_private.h **** // enter standby mode => messages are not transmitted nor received
 136:at90can_private.h **** 
 137:at90can_private.h **** extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
 138:at90can_private.h **** {
 139:at90can_private.h **** 	// request abort
 140:at90can_private.h **** 	CANGCON = (1 << ABRQ);
  30               		.loc 2 140 0
  31 0008 90E8      		ldi r25,lo8(-128)
  32 000a 9093 D800 		sts 216,r25
  33               	.L4:
 141:at90can_private.h **** 	
 142:at90can_private.h **** 	// wait until receiver is not busy
 143:at90can_private.h **** 	while (CANGSTA & (1 << RXBSY))
  34               		.loc 2 143 0
  35 000e 9091 D900 		lds r25,217
  36 0012 93FD      		sbrc r25,3
  37 0014 00C0      		rjmp .L4
 144:at90can_private.h **** 		;
 145:at90can_private.h **** 	
 146:at90can_private.h **** 	// request standby mode
 147:at90can_private.h **** 	CANGCON = 0;
  38               		.loc 2 147 0
  39 0016 1092 D800 		sts 216,__zero_reg__
  40               	.L6:
 148:at90can_private.h **** 	
 149:at90can_private.h **** 	// wait until the CAN Controller has entered standby mode
 150:at90can_private.h **** 	while (CANGSTA & (1 << ENFG))
  41               		.loc 2 150 0
  42 001a 9091 D900 		lds r25,217
  43 001e 92FD      		sbrc r25,2
  44 0020 00C0      		rjmp .L6
  45               	.LBE8:
  46               	.LBE7:
  38:at90can_set_dyn_filter.c **** 		// it is only possible to serve a maximum of MESSAGE_OBJECTS filters
  39:at90can_set_dyn_filter.c **** 		return false;
  40:at90can_set_dyn_filter.c **** 	}
  41:at90can_set_dyn_filter.c **** 	
  42:at90can_set_dyn_filter.c **** 	// set CAN Controller to standby mode
  43:at90can_set_dyn_filter.c **** 	_enter_standby_mode();
  44:at90can_set_dyn_filter.c **** 	
  45:at90can_set_dyn_filter.c **** 	CANPAGE = number << 4;
  47               		.loc 1 45 0
  48 0022 982F      		mov r25,r24
  49 0024 9295      		swap r25
  50 0026 907F      		andi r25,lo8(-16)
  51 0028 9093 ED00 		sts 237,r25
  46:at90can_set_dyn_filter.c **** 	
  47:at90can_set_dyn_filter.c **** 	CANSTMOB = 0;
  52               		.loc 1 47 0
  53 002c 1092 EE00 		sts 238,__zero_reg__
  48:at90can_set_dyn_filter.c **** 	CANCDMOB = 0;
  54               		.loc 1 48 0
  55 0030 1092 EF00 		sts 239,__zero_reg__
  49:at90can_set_dyn_filter.c **** 	
  50:at90can_set_dyn_filter.c **** 	#if SUPPORT_EXTENDED_CANID
  51:at90can_set_dyn_filter.c **** 	
  52:at90can_set_dyn_filter.c **** 	if (filter->flags.extended == 0x3)
  56               		.loc 1 52 0
  57 0034 9085      		ldd r25,Z+8
  58 0036 9C70      		andi r25,lo8(12)
  59 0038 9C30      		cpi r25,lo8(12)
  60 003a 01F0      		breq .+2
  61 003c 00C0      		rjmp .L7
  53:at90can_set_dyn_filter.c **** 	{
  54:at90can_set_dyn_filter.c **** 		// extended identifier
  55:at90can_set_dyn_filter.c **** 		CANIDT4 = (uint8_t)  filter->id << 3;
  62               		.loc 1 55 0
  63 003e 9081      		ld r25,Z
  64 0040 990F      		lsl r25
  65 0042 990F      		lsl r25
  66 0044 990F      		lsl r25
  67 0046 9093 F000 		sts 240,r25
  56:at90can_set_dyn_filter.c **** 		CANIDT3 = 			 filter->id >> 5;
  68               		.loc 1 56 0
  69 004a 4081      		ld r20,Z
  70 004c 5181      		ldd r21,Z+1
  71 004e 6281      		ldd r22,Z+2
  72 0050 7381      		ldd r23,Z+3
  73 0052 A5E0      		ldi r26,5
  74               		1:
  75 0054 7695      		lsr r23
  76 0056 6795      		ror r22
  77 0058 5795      		ror r21
  78 005a 4795      		ror r20
  79 005c AA95      		dec r26
  80 005e 01F4      		brne 1b
  81 0060 4093 F100 		sts 241,r20
  57:at90can_set_dyn_filter.c **** 		CANIDT2 =            filter->id >> 13;
  82               		.loc 1 57 0
  83 0064 4081      		ld r20,Z
  84 0066 5181      		ldd r21,Z+1
  85 0068 6281      		ldd r22,Z+2
  86 006a 7381      		ldd r23,Z+3
  87 006c BDE0      		ldi r27,13
  88               		1:
  89 006e 7695      		lsr r23
  90 0070 6795      		ror r22
  91 0072 5795      		ror r21
  92 0074 4795      		ror r20
  93 0076 BA95      		dec r27
  94 0078 01F4      		brne 1b
  95 007a 4093 F200 		sts 242,r20
  58:at90can_set_dyn_filter.c **** 		CANIDT1 =            filter->id >> 21;
  96               		.loc 1 58 0
  97 007e 4081      		ld r20,Z
  98 0080 5181      		ldd r21,Z+1
  99 0082 6281      		ldd r22,Z+2
 100 0084 7381      		ldd r23,Z+3
 101 0086 95E1      		ldi r25,21
 102               		1:
 103 0088 7695      		lsr r23
 104 008a 6795      		ror r22
 105 008c 5795      		ror r21
 106 008e 4795      		ror r20
 107 0090 9A95      		dec r25
 108 0092 01F4      		brne 1b
 109 0094 4093 F300 		sts 243,r20
  59:at90can_set_dyn_filter.c **** 		
  60:at90can_set_dyn_filter.c **** 		CANIDM4 = ((uint8_t) filter->mask << 3) | (1 << IDEMSK);
 110               		.loc 1 60 0
 111 0098 2481      		ldd r18,Z+4
 112 009a 98E0      		ldi r25,lo8(8)
 113 009c 299F      		mul r18,r25
 114 009e 9001      		movw r18,r0
 115 00a0 1124      		clr __zero_reg__
 116 00a2 2160      		ori r18,lo8(1)
 117 00a4 2093 F400 		sts 244,r18
  61:at90can_set_dyn_filter.c **** 		CANIDM3 = 			 filter->mask >> 5;
 118               		.loc 1 61 0
 119 00a8 4481      		ldd r20,Z+4
 120 00aa 5581      		ldd r21,Z+5
 121 00ac 6681      		ldd r22,Z+6
 122 00ae 7781      		ldd r23,Z+7
 123 00b0 25E0      		ldi r18,5
 124               		1:
 125 00b2 7695      		lsr r23
 126 00b4 6795      		ror r22
 127 00b6 5795      		ror r21
 128 00b8 4795      		ror r20
 129 00ba 2A95      		dec r18
 130 00bc 01F4      		brne 1b
 131 00be 4093 F500 		sts 245,r20
  62:at90can_set_dyn_filter.c **** 		CANIDM2 =            filter->mask >> 13;
 132               		.loc 1 62 0
 133 00c2 4481      		ldd r20,Z+4
 134 00c4 5581      		ldd r21,Z+5
 135 00c6 6681      		ldd r22,Z+6
 136 00c8 7781      		ldd r23,Z+7
 137 00ca 3DE0      		ldi r19,13
 138               		1:
 139 00cc 7695      		lsr r23
 140 00ce 6795      		ror r22
 141 00d0 5795      		ror r21
 142 00d2 4795      		ror r20
 143 00d4 3A95      		dec r19
 144 00d6 01F4      		brne 1b
 145 00d8 4093 F600 		sts 246,r20
  63:at90can_set_dyn_filter.c **** 		CANIDM1 =            filter->mask >> 21;
 146               		.loc 1 63 0
 147 00dc 4481      		ldd r20,Z+4
 148 00de 5581      		ldd r21,Z+5
 149 00e0 6681      		ldd r22,Z+6
 150 00e2 7781      		ldd r23,Z+7
 151 00e4 A5E1      		ldi r26,21
 152               		1:
 153 00e6 7695      		lsr r23
 154 00e8 6795      		ror r22
 155 00ea 5795      		ror r21
 156 00ec 4795      		ror r20
 157 00ee AA95      		dec r26
 158 00f0 01F4      		brne 1b
 159 00f2 4093 F700 		sts 247,r20
  64:at90can_set_dyn_filter.c **** 		
  65:at90can_set_dyn_filter.c **** 		CANCDMOB |= (1 << IDE);
 160               		.loc 1 65 0
 161 00f6 9091 EF00 		lds r25,239
 162 00fa 9061      		ori r25,lo8(16)
 163 00fc 9093 EF00 		sts 239,r25
 164 0100 00C0      		rjmp .L8
 165               	.L7:
  66:at90can_set_dyn_filter.c **** 	}
  67:at90can_set_dyn_filter.c **** 	else {
  68:at90can_set_dyn_filter.c **** 		CANIDT4 = 0;
 166               		.loc 1 68 0
 167 0102 1092 F000 		sts 240,__zero_reg__
  69:at90can_set_dyn_filter.c **** 		CANIDT3 = 0;
 168               		.loc 1 69 0
 169 0106 1092 F100 		sts 241,__zero_reg__
  70:at90can_set_dyn_filter.c **** 		CANIDT2 = (uint8_t)  filter->id << 5;
 170               		.loc 1 70 0
 171 010a 9081      		ld r25,Z
 172 010c 9295      		swap r25
 173 010e 990F      		lsl r25
 174 0110 907E      		andi r25,lo8(-32)
 175 0112 9093 F200 		sts 242,r25
  71:at90can_set_dyn_filter.c **** 		CANIDT1 = (uint16_t) filter->id >> 3;
 176               		.loc 1 71 0
 177 0116 2081      		ld r18,Z
 178 0118 3181      		ldd r19,Z+1
 179 011a 43E0      		ldi r20,3
 180               		1:
 181 011c 3695      		lsr r19
 182 011e 2795      		ror r18
 183 0120 4A95      		dec r20
 184 0122 01F4      		brne 1b
 185 0124 2093 F300 		sts 243,r18
  72:at90can_set_dyn_filter.c **** 		
  73:at90can_set_dyn_filter.c **** 		if (filter->flags.extended) {
 186               		.loc 1 73 0
 187 0128 9085      		ldd r25,Z+8
 188 012a 9C70      		andi r25,lo8(12)
 189 012c 01F0      		breq .L9
  74:at90can_set_dyn_filter.c **** 			CANIDM4 = (1 << IDEMSK);		// receive only standard frames
 190               		.loc 1 74 0
 191 012e 91E0      		ldi r25,lo8(1)
 192 0130 9093 F400 		sts 244,r25
 193 0134 00C0      		rjmp .L10
 194               	.L9:
  75:at90can_set_dyn_filter.c **** 		} else {
  76:at90can_set_dyn_filter.c **** 			CANIDM4 = 0;					// receive all frames
 195               		.loc 1 76 0
 196 0136 1092 F400 		sts 244,__zero_reg__
 197               	.L10:
  77:at90can_set_dyn_filter.c **** 		}
  78:at90can_set_dyn_filter.c **** 		
  79:at90can_set_dyn_filter.c **** 		CANIDM3 = 0;
 198               		.loc 1 79 0
 199 013a 1092 F500 		sts 245,__zero_reg__
  80:at90can_set_dyn_filter.c **** 		CANIDM2 = (uint8_t)  filter->mask << 5;
 200               		.loc 1 80 0
 201 013e 9481      		ldd r25,Z+4
 202 0140 9295      		swap r25
 203 0142 990F      		lsl r25
 204 0144 907E      		andi r25,lo8(-32)
 205 0146 9093 F600 		sts 246,r25
  81:at90can_set_dyn_filter.c **** 		CANIDM1 = (uint16_t) filter->mask >> 3;
 206               		.loc 1 81 0
 207 014a 2481      		ldd r18,Z+4
 208 014c 3581      		ldd r19,Z+5
 209 014e 93E0      		ldi r25,3
 210               		1:
 211 0150 3695      		lsr r19
 212 0152 2795      		ror r18
 213 0154 9A95      		dec r25
 214 0156 01F4      		brne 1b
 215 0158 2093 F700 		sts 247,r18
 216               	.L8:
  82:at90can_set_dyn_filter.c **** 	}
  83:at90can_set_dyn_filter.c **** 	
  84:at90can_set_dyn_filter.c **** 	#else
  85:at90can_set_dyn_filter.c **** 	
  86:at90can_set_dyn_filter.c **** 	CANIDT4 = 0;
  87:at90can_set_dyn_filter.c **** 	CANIDT3 = 0;
  88:at90can_set_dyn_filter.c **** 	CANIDT2 = (uint8_t)  filter->id << 5;
  89:at90can_set_dyn_filter.c **** 	CANIDT1 = (uint16_t) filter->id >> 3;
  90:at90can_set_dyn_filter.c **** 	
  91:at90can_set_dyn_filter.c **** 	CANIDM4 = (1 << IDEMSK);
  92:at90can_set_dyn_filter.c **** 	CANIDM3 = 0;
  93:at90can_set_dyn_filter.c **** 	CANIDM2 = (uint8_t)  filter->mask << 5;
  94:at90can_set_dyn_filter.c **** 	CANIDM1 = (uint16_t) filter->mask >> 3;
  95:at90can_set_dyn_filter.c **** 	
  96:at90can_set_dyn_filter.c **** 	#endif
  97:at90can_set_dyn_filter.c **** 	
  98:at90can_set_dyn_filter.c **** 	if (filter->flags.rtr & 0x2) {
 217               		.loc 1 98 0
 218 015c 9085      		ldd r25,Z+8
 219 015e 91FF      		sbrs r25,1
 220 0160 00C0      		rjmp .L12
  99:at90can_set_dyn_filter.c **** 		CANIDM4 |= (1 << RTRMSK);
 221               		.loc 1 99 0
 222 0162 9091 F400 		lds r25,244
 223 0166 9460      		ori r25,lo8(4)
 224 0168 9093 F400 		sts 244,r25
 100:at90can_set_dyn_filter.c **** 		
 101:at90can_set_dyn_filter.c **** 		if (filter->flags.rtr & 0x1)
 225               		.loc 1 101 0
 226 016c 9085      		ldd r25,Z+8
 227 016e 90FF      		sbrs r25,0
 228 0170 00C0      		rjmp .L12
 102:at90can_set_dyn_filter.c **** 			CANIDT4 |= (1 << RTRMSK);		// only RTR-frames
 229               		.loc 1 102 0
 230 0172 9091 F000 		lds r25,240
 231 0176 9460      		ori r25,lo8(4)
 232 0178 9093 F000 		sts 240,r25
 233               	.L12:
 103:at90can_set_dyn_filter.c **** 	}
 104:at90can_set_dyn_filter.c **** 	
 105:at90can_set_dyn_filter.c **** 	CANCDMOB |= (1<<CONMOB1);
 234               		.loc 1 105 0
 235 017c 9091 EF00 		lds r25,239
 236 0180 9068      		ori r25,lo8(-128)
 237 0182 9093 EF00 		sts 239,r25
 106:at90can_set_dyn_filter.c **** 	
 107:at90can_set_dyn_filter.c **** 	_enable_mob_interrupt(number);
 238               		.loc 1 107 0
 239 0186 0E94 0000 		call _enable_mob_interrupt
 240               	.LVL1:
 241               	.LBB9:
 242               	.LBB10:
 151:at90can_private.h **** 		;
 152:at90can_private.h **** }
 153:at90can_private.h **** 
 154:at90can_private.h **** // ----------------------------------------------------------------------------
 155:at90can_private.h **** // leave standby mode => CAN Controller is connected to CAN Bus
 156:at90can_private.h **** 
 157:at90can_private.h **** extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
 158:at90can_private.h **** {
 159:at90can_private.h **** 	// save CANPAGE register
 160:at90can_private.h **** 	uint8_t canpage = CANPAGE;
 243               		.loc 2 160 0
 244 018a 9091 ED00 		lds r25,237
 245               	.LVL2:
 246               	.LBB11:
 161:at90can_private.h **** 	
 162:at90can_private.h **** 	// reenable all MObs
 163:at90can_private.h **** 	for (uint8_t i=0;i<MESSAGE_OBJECTS;i++) {
 247               		.loc 2 163 0
 248 018e 80E0      		ldi r24,0
 249               	.LVL3:
 250               	.L15:
 164:at90can_private.h **** 		CANPAGE = i << 4;
 251               		.loc 2 164 0
 252 0190 282F      		mov r18,r24
 253 0192 2295      		swap r18
 254 0194 207F      		andi r18,lo8(-16)
 255 0196 2093 ED00 		sts 237,r18
 165:at90can_private.h **** 		CANCDMOB = CANCDMOB;
 256               		.loc 2 165 0
 257 019a 2091 EF00 		lds r18,239
 258 019e 2093 EF00 		sts 239,r18
 163:at90can_private.h **** 	for (uint8_t i=0;i<MESSAGE_OBJECTS;i++) {
 259               		.loc 2 163 0
 260 01a2 8F5F      		subi r24,lo8(-(1))
 261               	.LVL4:
 262 01a4 8630      		cpi r24,lo8(6)
 263 01a6 01F4      		brne .L15
 264               	.LBE11:
 166:at90can_private.h **** 	}
 167:at90can_private.h **** 	
 168:at90can_private.h **** 	// restore CANPAGE
 169:at90can_private.h **** 	CANPAGE = canpage;
 265               		.loc 2 169 0
 266 01a8 9093 ED00 		sts 237,r25
 170:at90can_private.h **** 	
 171:at90can_private.h **** 	// request normal mode
 172:at90can_private.h **** 	CANGCON = (1 << ENASTB);
 267               		.loc 2 172 0
 268 01ac 82E0      		ldi r24,lo8(2)
 269               	.LVL5:
 270 01ae 8093 D800 		sts 216,r24
 271               	.L16:
 173:at90can_private.h **** 	
 174:at90can_private.h **** 	// wait until the CAN Controller has left standby mode
 175:at90can_private.h **** 	while ((CANGSTA & (1 << ENFG)) == 0)
 272               		.loc 2 175 0
 273 01b2 8091 D900 		lds r24,217
 274 01b6 82FF      		sbrs r24,2
 275 01b8 00C0      		rjmp .L16
 276 01ba 00C0      		rjmp .L23
 277               	.LVL6:
 278               	.L17:
 279               	.LBE10:
 280               	.LBE9:
  39:at90can_set_dyn_filter.c **** 		return false;
 281               		.loc 1 39 0
 282 01bc 80E0      		ldi r24,0
 283               	.LVL7:
 284 01be 0895      		ret
 285               	.LVL8:
 286               	.L23:
 108:at90can_set_dyn_filter.c **** 	
 109:at90can_set_dyn_filter.c **** 	// re-enable CAN Controller 
 110:at90can_set_dyn_filter.c **** 	_leave_standby_mode();
 111:at90can_set_dyn_filter.c **** 	
 112:at90can_set_dyn_filter.c **** 	return true;
 287               		.loc 1 112 0
 288 01c0 81E0      		ldi r24,lo8(1)
 113:at90can_set_dyn_filter.c **** }
 289               		.loc 1 113 0
 290 01c2 0895      		ret
 291               		.cfi_endproc
 292               	.LFE18:
 294               	.Letext0:
 295               		.file 3 "/usr/lib/avr/include/stdint.h"
 296               		.file 4 "can.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 at90can_set_dyn_filter.c
     /tmp/ccE2N3Af.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccE2N3Af.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccE2N3Af.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccE2N3Af.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccE2N3Af.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccE2N3Af.s:12     .text:0000000000000000 can_set_filter

UNDEFINED SYMBOLS
_enable_mob_interrupt
