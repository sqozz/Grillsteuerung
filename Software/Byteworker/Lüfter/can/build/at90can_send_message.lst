   1               		.file	"at90can_send_message.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	at90can_copy_message_to_mob
  12               	at90can_copy_message_to_mob:
  13               	.LFB18:
  14               		.file 1 "at90can_send_message.c"
   1:at90can_send_message.c **** // ----------------------------------------------------------------------------
   2:at90can_send_message.c **** /*
   3:at90can_send_message.c ****  * Copyright (c) 2007 Fabian Greif, Roboterclub Aachen e.V.
   4:at90can_send_message.c ****  *  All rights reserved.
   5:at90can_send_message.c ****  *
   6:at90can_send_message.c ****  * Redistribution and use in source and binary forms, with or without
   7:at90can_send_message.c ****  * modification, are permitted provided that the following conditions
   8:at90can_send_message.c ****  * are met:
   9:at90can_send_message.c ****  * 1. Redistributions of source code must retain the above copyright
  10:at90can_send_message.c ****  *    notice, this list of conditions and the following disclaimer.
  11:at90can_send_message.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:at90can_send_message.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:at90can_send_message.c ****  *    documentation and/or other materials provided with the distribution.
  14:at90can_send_message.c ****  *
  15:at90can_send_message.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  16:at90can_send_message.c ****  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  17:at90can_send_message.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  18:at90can_send_message.c ****  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  19:at90can_send_message.c ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  20:at90can_send_message.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  21:at90can_send_message.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  22:at90can_send_message.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  23:at90can_send_message.c ****  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  24:at90can_send_message.c ****  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  25:at90can_send_message.c ****  * SUCH DAMAGE.
  26:at90can_send_message.c ****  *
  27:at90can_send_message.c ****  * $Id: at90can_send_message.c 6837 2008-11-16 19:05:15Z fabian $
  28:at90can_send_message.c ****  */
  29:at90can_send_message.c **** // ----------------------------------------------------------------------------
  30:at90can_send_message.c **** 
  31:at90can_send_message.c **** #include "at90can_private.h"
  32:at90can_send_message.c **** #ifdef	SUPPORT_FOR_AT90CAN__
  33:at90can_send_message.c **** 
  34:at90can_send_message.c **** #include <string.h>
  35:at90can_send_message.c **** 
  36:at90can_send_message.c **** // ----------------------------------------------------------------------------
  37:at90can_send_message.c **** /**
  38:at90can_send_message.c ****  * \brief	Copy data form a message in RAM to the actual registers
  39:at90can_send_message.c ****  * 
  40:at90can_send_message.c ****  * \warning this function assumes CANPAGE to be set properly before the call
  41:at90can_send_message.c ****  */
  42:at90can_send_message.c **** void at90can_copy_message_to_mob(const can_t *msg)
  43:at90can_send_message.c **** {
  15               		.loc 1 43 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 00D0      		rcall .
  27 0006 00D0      		rcall .
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 8
  30 0008 CDB7      		in r28,__SP_L__
  31 000a DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 4 */
  36               	/* stack size = 6 */
  37               	.L__stack_usage = 6
  38 000c FC01      		movw r30,r24
  44:at90can_send_message.c **** 	// write DLC (Data Length Code)
  45:at90can_send_message.c **** 	CANCDMOB = msg->length;
  39               		.loc 1 45 0
  40 000e 8581      		ldd r24,Z+5
  41               	.LVL1:
  42 0010 8093 EF00 		sts 239,r24
  46:at90can_send_message.c **** 	
  47:at90can_send_message.c **** 	#if SUPPORT_EXTENDED_CANID
  48:at90can_send_message.c **** 	
  49:at90can_send_message.c **** 	if (msg->flags.extended) {
  43               		.loc 1 49 0
  44 0014 8481      		ldd r24,Z+4
  45 0016 81FF      		sbrs r24,1
  46 0018 00C0      		rjmp .L2
  47               	.LBB7:
  50:at90can_send_message.c **** 		// extended CAN ID
  51:at90can_send_message.c **** 		CANCDMOB |= (1 << IDE);
  48               		.loc 1 51 0
  49 001a 8091 EF00 		lds r24,239
  50 001e 8061      		ori r24,lo8(16)
  51 0020 8093 EF00 		sts 239,r24
  52:at90can_send_message.c **** 		
  53:at90can_send_message.c **** 		CANIDT4 = (uint8_t)  msg->id << 3;
  52               		.loc 1 53 0
  53 0024 8081      		ld r24,Z
  54 0026 880F      		lsl r24
  55 0028 880F      		lsl r24
  56 002a 880F      		lsl r24
  57 002c 8093 F000 		sts 240,r24
  54:at90can_send_message.c **** 		
  55:at90can_send_message.c **** 		uint32_t temp = msg->id << 3;
  58               		.loc 1 55 0
  59 0030 4081      		ld r20,Z
  60 0032 5181      		ldd r21,Z+1
  61 0034 6281      		ldd r22,Z+2
  62 0036 7381      		ldd r23,Z+3
  63 0038 33E0      		ldi r19,3
  64               		1:
  65 003a 440F      		lsl r20
  66 003c 551F      		rol r21
  67 003e 661F      		rol r22
  68 0040 771F      		rol r23
  69 0042 3A95      		dec r19
  70 0044 01F4      		brne 1b
  71 0046 4983      		std Y+1,r20
  72 0048 5A83      		std Y+2,r21
  73 004a 6B83      		std Y+3,r22
  74 004c 7C83      		std Y+4,r23
  75               	.LVL2:
  56:at90can_send_message.c **** 		uint8_t *ptr = (uint8_t *) &temp;
  57:at90can_send_message.c **** 		
  58:at90can_send_message.c **** 		CANIDT3 = *(ptr + 1);
  76               		.loc 1 58 0
  77 004e 8A81      		ldd r24,Y+2
  78 0050 8093 F100 		sts 241,r24
  59:at90can_send_message.c **** 		CANIDT2 = *(ptr + 2);
  79               		.loc 1 59 0
  80 0054 8B81      		ldd r24,Y+3
  81 0056 8093 F200 		sts 242,r24
  60:at90can_send_message.c **** 		CANIDT1 = *(ptr + 3);
  82               		.loc 1 60 0
  83 005a 8C81      		ldd r24,Y+4
  84 005c 00C0      		rjmp .L8
  85               	.LVL3:
  86               	.L2:
  87               	.LBE7:
  61:at90can_send_message.c **** 	}
  62:at90can_send_message.c **** 	else {
  63:at90can_send_message.c **** 		// standard CAN ID
  64:at90can_send_message.c **** 		CANIDT4 = 0;
  88               		.loc 1 64 0
  89 005e 1092 F000 		sts 240,__zero_reg__
  65:at90can_send_message.c **** 		CANIDT3 = 0;
  90               		.loc 1 65 0
  91 0062 1092 F100 		sts 241,__zero_reg__
  66:at90can_send_message.c **** 		CANIDT2 = (uint8_t)  msg->id << 5;
  92               		.loc 1 66 0
  93 0066 8081      		ld r24,Z
  94 0068 8295      		swap r24
  95 006a 880F      		lsl r24
  96 006c 807E      		andi r24,lo8(-32)
  97 006e 8093 F200 		sts 242,r24
  67:at90can_send_message.c **** 		CANIDT1 = (uint16_t) msg->id >> 3;
  98               		.loc 1 67 0
  99 0072 8081      		ld r24,Z
 100 0074 9181      		ldd r25,Z+1
 101 0076 23E0      		ldi r18,3
 102               		1:
 103 0078 9695      		lsr r25
 104 007a 8795      		ror r24
 105 007c 2A95      		dec r18
 106 007e 01F4      		brne 1b
 107               	.L8:
 108 0080 8093 F300 		sts 243,r24
  68:at90can_send_message.c **** 	}
  69:at90can_send_message.c **** 	
  70:at90can_send_message.c **** 	#else
  71:at90can_send_message.c **** 	
  72:at90can_send_message.c **** 	CANIDT4 = 0;
  73:at90can_send_message.c **** 	CANIDT3 = 0;
  74:at90can_send_message.c **** 	CANIDT2 = (uint8_t)  msg->id << 5;
  75:at90can_send_message.c **** 	CANIDT1 = (uint16_t) msg->id >> 3;
  76:at90can_send_message.c **** 	
  77:at90can_send_message.c **** 	#endif
  78:at90can_send_message.c **** 	
  79:at90can_send_message.c **** 	if (msg->flags.rtr) {
 109               		.loc 1 79 0
 110 0084 8481      		ldd r24,Z+4
 111 0086 80FF      		sbrs r24,0
 112 0088 00C0      		rjmp .L4
  80:at90can_send_message.c **** 		CANIDT4 |= (1<<RTRTAG);
 113               		.loc 1 80 0
 114 008a 8091 F000 		lds r24,240
 115 008e 8460      		ori r24,lo8(4)
 116 0090 8093 F000 		sts 240,r24
 117 0094 00C0      		rjmp .L1
 118               	.L4:
 119               	.LVL4:
 120               	.LBB8:
  81:at90can_send_message.c **** 	}
  82:at90can_send_message.c **** 	else {
  83:at90can_send_message.c **** 		const uint8_t *p = msg->data;
 121               		.loc 1 83 0
 122 0096 CF01      		movw r24,r30
 123 0098 0696      		adiw r24,6
 124               	.LVL5:
 125               	.LBB9:
  84:at90can_send_message.c **** 		for (uint8_t i = 0;i < msg->length;i++) {
 126               		.loc 1 84 0
 127 009a DC01      		movw r26,r24
 128               	.LVL6:
 129               	.L6:
 130               		.loc 1 84 0 is_stmt 0 discriminator 1
 131 009c 2581      		ldd r18,Z+5
 132 009e 3A2F      		mov r19,r26
 133 00a0 381B      		sub r19,r24
 134 00a2 3217      		cp r19,r18
 135 00a4 00F4      		brsh .L1
 136               	.LVL7:
  85:at90can_send_message.c **** 			CANMSG = *p++;
 137               		.loc 1 85 0 is_stmt 1 discriminator 2
 138 00a6 2D91      		ld r18,X+
 139               	.LVL8:
 140 00a8 2093 FA00 		sts 250,r18
 141               	.LVL9:
 142 00ac 00C0      		rjmp .L6
 143               	.LVL10:
 144               	.L1:
 145               	/* epilogue start */
 146               	.LBE9:
 147               	.LBE8:
  86:at90can_send_message.c **** 		}
  87:at90can_send_message.c **** 	}
  88:at90can_send_message.c **** }
 148               		.loc 1 88 0
 149 00ae 0F90      		pop __tmp_reg__
 150 00b0 0F90      		pop __tmp_reg__
 151 00b2 0F90      		pop __tmp_reg__
 152 00b4 0F90      		pop __tmp_reg__
 153 00b6 DF91      		pop r29
 154 00b8 CF91      		pop r28
 155 00ba 0895      		ret
 156               		.cfi_endproc
 157               	.LFE18:
 159               	.global	can_send_message
 161               	can_send_message:
 162               	.LFB19:
  89:at90can_send_message.c **** 
  90:at90can_send_message.c **** // ----------------------------------------------------------------------------
  91:at90can_send_message.c **** uint8_t at90can_send_message(const can_t *msg)
  92:at90can_send_message.c **** {
 163               		.loc 1 92 0
 164               		.cfi_startproc
 165               	.LVL11:
 166 00bc 1F93      		push r17
 167               	.LCFI4:
 168               		.cfi_def_cfa_offset 3
 169               		.cfi_offset 17, -2
 170 00be CF93      		push r28
 171               	.LCFI5:
 172               		.cfi_def_cfa_offset 4
 173               		.cfi_offset 28, -3
 174 00c0 DF93      		push r29
 175               	.LCFI6:
 176               		.cfi_def_cfa_offset 5
 177               		.cfi_offset 29, -4
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 3 */
 181               	.L__stack_usage = 3
 182 00c2 EC01      		movw r28,r24
  93:at90can_send_message.c **** 	// check if there is any free MOb
  94:at90can_send_message.c **** 	uint8_t mob = _find_free_mob();
 183               		.loc 1 94 0
 184 00c4 0E94 0000 		call _find_free_mob
 185               	.LVL12:
 186 00c8 182F      		mov r17,r24
 187               	.LVL13:
  95:at90can_send_message.c **** 	if (mob >= MESSAGE_OBJECTS)
 188               		.loc 1 95 0
 189 00ca 8630      		cpi r24,lo8(6)
 190 00cc 00F4      		brsh .L12
  96:at90can_send_message.c **** 		return 0;
  97:at90can_send_message.c **** 	
  98:at90can_send_message.c **** 	// load corresponding MOb page ...
  99:at90can_send_message.c **** 	CANPAGE = (mob << 4);
 191               		.loc 1 99 0
 192 00ce 8295      		swap r24
 193 00d0 807F      		andi r24,lo8(-16)
 194 00d2 8093 ED00 		sts 237,r24
 100:at90can_send_message.c **** 	
 101:at90can_send_message.c **** 	// clear flags
 102:at90can_send_message.c **** 	CANSTMOB &= 0;
 195               		.loc 1 102 0
 196 00d6 8091 EE00 		lds r24,238
 197 00da 1092 EE00 		sts 238,__zero_reg__
 103:at90can_send_message.c **** 	
 104:at90can_send_message.c **** 	// ... and copy the data
 105:at90can_send_message.c **** 	at90can_copy_message_to_mob( msg );
 198               		.loc 1 105 0
 199 00de CE01      		movw r24,r28
 200 00e0 0E94 0000 		call at90can_copy_message_to_mob
 201               	.LVL14:
 106:at90can_send_message.c **** 	
 107:at90can_send_message.c **** 	// enable interrupt
 108:at90can_send_message.c **** 	_enable_mob_interrupt(mob);
 202               		.loc 1 108 0
 203 00e4 812F      		mov r24,r17
 204 00e6 0E94 0000 		call _enable_mob_interrupt
 205               	.LVL15:
 206               	.LBB10:
 109:at90can_send_message.c **** 	
 110:at90can_send_message.c **** 	ENTER_CRITICAL_SECTION;
 207               		.loc 1 110 0
 208 00ea 9FB7      		in r25,__SREG__
 209               	.LVL16:
 210               	.LBB11:
 211               	.LBB12:
 212               		.file 2 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 213               		.loc 2 50 0
 214               	/* #APP */
 215               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 216 00ec F894      		cli
 217               	 ;  0 "" 2
 218               	.LVL17:
 219               	/* #NOAPP */
 220               	.LBE12:
 221               	.LBE11:
 111:at90can_send_message.c **** 	#if CAN_TX_BUFFER_SIZE == 0
 112:at90can_send_message.c **** 		_free_buffer--;
 222               		.loc 1 112 0
 223 00ee 8091 0000 		lds r24,_free_buffer
 224 00f2 8150      		subi r24,lo8(-(-1))
 225 00f4 8093 0000 		sts _free_buffer,r24
 226               	.LVL18:
 227               	.LBB13:
 228               	.LBB14:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
 229               		.loc 2 70 0
 230 00f8 9FBF      		out __SREG__,r25
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 231               		.loc 2 71 0
 232               	.LBE14:
 233               	.LBE13:
 234               	.LBE10:
 113:at90can_send_message.c **** 	#else
 114:at90can_send_message.c **** 		_transmission_in_progress = 1;
 115:at90can_send_message.c **** 	#endif
 116:at90can_send_message.c **** 	LEAVE_CRITICAL_SECTION;
 117:at90can_send_message.c **** 	
 118:at90can_send_message.c **** 	// enable transmission
 119:at90can_send_message.c **** 	CANCDMOB |= (1<<CONMOB0);
 235               		.loc 1 119 0
 236 00fa 8091 EF00 		lds r24,239
 237 00fe 8064      		ori r24,lo8(64)
 238 0100 8093 EF00 		sts 239,r24
 120:at90can_send_message.c **** 	
 121:at90can_send_message.c **** 	return (mob + 1);
 239               		.loc 1 121 0
 240 0104 81E0      		ldi r24,lo8(1)
 241 0106 810F      		add r24,r17
 242 0108 00C0      		rjmp .L11
 243               	.LVL19:
 244               	.L12:
  96:at90can_send_message.c **** 		return 0;
 245               		.loc 1 96 0
 246 010a 80E0      		ldi r24,0
 247               	.L11:
 248               	/* epilogue start */
 122:at90can_send_message.c **** }
 249               		.loc 1 122 0
 250 010c DF91      		pop r29
 251 010e CF91      		pop r28
 252               	.LVL20:
 253 0110 1F91      		pop r17
 254               	.LVL21:
 255 0112 0895      		ret
 256               		.cfi_endproc
 257               	.LFE19:
 259               	.Letext0:
 260               		.file 3 "/usr/lib/avr/include/stdint.h"
 261               		.file 4 "can.h"
 262               		.file 5 "at90can_private.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 at90can_send_message.c
     /tmp/ccRfHWun.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRfHWun.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRfHWun.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRfHWun.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRfHWun.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRfHWun.s:12     .text:0000000000000000 at90can_copy_message_to_mob
     /tmp/ccRfHWun.s:161    .text:00000000000000bc can_send_message

UNDEFINED SYMBOLS
_find_free_mob
_enable_mob_interrupt
_free_buffer
